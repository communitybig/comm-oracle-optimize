# Installation file for Oracle Cloud optimization package

# Define colors for output
red='\e[1;31m'
green='\e[1;32m'
yellow='\e[1;33m'
blue='\e[1;34m'
nc='\e[0m' # No Color

pre_install() {
    echo -e "${blue}Preparing to install Oracle Cloud optimization package...${nc}"
    
    # Check if running on Oracle Cloud
    if ! grep -q "OracleCloud" /sys/devices/virtual/dmi/id/chassis_vendor 2>/dev/null; then
        echo -e "${yellow}Warning: This system may not be running on Oracle Cloud.${nc}"
        echo -e "${yellow}Optimizations are specifically tuned for Oracle Cloud environments.${nc}"
    fi
    
    # Check if running on AMD EPYC
    if ! grep -q "EPYC" /proc/cpuinfo; then
        echo -e "${yellow}Warning: AMD EPYC processor not detected.${nc}"
        echo -e "${yellow}Some optimizations may not be optimal for your CPU.${nc}"
    fi
    
    # Backup existing configuration files if they exist
    if [ -f /etc/sysctl.conf ]; then
        cp /etc/sysctl.conf /etc/sysctl.conf.bak.$(date +%Y%m%d)
        echo -e "${yellow}Created backup of sysctl.conf${nc}"
    fi
    
    if [ -f /etc/security/limits.conf ]; then
        cp /etc/security/limits.conf /etc/security/limits.conf.bak.$(date +%Y%m%d)
        echo -e "${yellow}Created backup of limits.conf${nc}"
    fi
    
    if [ -f /etc/default/grub ]; then
        cp /etc/default/grub /etc/default/grub.bak.$(date +%Y%m%d)
        echo -e "${yellow}Created backup of grub configuration${nc}"
    fi
}

post_install() {
    echo -e "${blue}Configuring system for Oracle Cloud with AMD EPYC processors...${nc}"
    
    # Apply sysctl settings
    echo -e "${green}Applying sysctl optimizations...${nc}"
    sysctl -p /etc/sysctl.d/99-oracle-optimize.conf
    
    # Configure GRUB for server environment
    echo -e "${green}Configuring GRUB for Oracle Cloud environment...${nc}"
    
    # Backup original GRUB_CMDLINE_LINUX_DEFAULT
    GRUB_OLD=$(grep "GRUB_CMDLINE_LINUX_DEFAULT" /etc/default/grub)
    echo -e "${yellow}Original GRUB config: $GRUB_OLD${nc}"
    
    # Create optimized GRUB config for Oracle Cloud
    sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/GRUB_CMDLINE_LINUX_DEFAULT="quiet splash console=tty0 console=ttyS0,9600n8 rd.driver.blacklist=nouveau intel_iommu=on net.ifnames=0 biosdevname=0 nvme_core.io_timeout=4294967295 mitigations=off"/' /etc/default/grub
    
    echo -e "${yellow}Added optimized parameters to GRUB configuration${nc}"
    grub-mkconfig -o /boot/grub/grub.cfg
    echo -e "${green}Generated updated GRUB configuration${nc}"
    
    # Ensure all required modules are loaded
    echo -e "${green}Checking for required kernel modules...${nc}"
    for module in tcp_bbr xt_conntrack xt_state; do
        if ! lsmod | grep -q "$module" 2>/dev/null; then
            echo -e "${yellow}Loading kernel module: $module${nc}"
            modprobe $module 2>/dev/null || echo -e "${red}Failed to load module: $module${nc}"
        else
            echo -e "${green}Module already loaded: $module${nc}"
        fi
    done
    
    # Verify critical settings
    echo -e "${blue}Verifying critical settings...${nc}"
    
    if sysctl net.ipv4.tcp_congestion_control | grep -q "bbr"; then
        echo -e "${green}✓ BBR congestion control enabled${nc}"
    else
        echo -e "${red}✗ BBR congestion control not enabled${nc}"
        echo -e "${yellow}Trying to enable BBR congestion control...${nc}"
        sysctl -w net.ipv4.tcp_congestion_control=bbr
    fi
    
    # Check file descriptor limits
    if grep -q "nofile 65536" /etc/security/limits.d/99-oracle-optimize.conf 2>/dev/null; then
        echo -e "${green}✓ File descriptor limits configured${nc}"
    else
        echo -e "${red}✗ File descriptor limits not properly configured${nc}"
    fi
    
    # Check if IPv6 is disabled
    if sysctl -n net.ipv6.conf.all.disable_ipv6 | grep -q "1"; then
        echo -e "${green}✓ IPv6 is disabled${nc}"
    else
        echo -e "${red}✗ IPv6 is not disabled${nc}"
        echo -e "${yellow}Trying to disable IPv6...${nc}"
        sysctl -w net.ipv6.conf.all.disable_ipv6=1
        sysctl -w net.ipv6.conf.default.disable_ipv6=1
        sysctl -w net.ipv6.conf.lo.disable_ipv6=1
    fi
    
    echo -e "${green}==============================================================${nc}"
    echo -e "${green}Oracle Cloud optimizations installed successfully!${nc}"
    echo -e "${yellow}A system reboot is recommended to apply all changes.${nc}"
    echo -e "${green}==============================================================${nc}"
}

pre_upgrade() {
    echo -e "${blue}Preparing upgrade of optimization package...${nc}"
    pre_install
}

post_upgrade() {
    echo -e "${blue}Finalizing optimization package upgrade...${nc}"
    post_install
}

pre_remove() {
    echo -e "${blue}Preparing to remove optimization package...${nc}"
    
    # Backup current configurations before removal
    if [ -f /etc/sysctl.d/99-oracle-optimize.conf ]; then
        cp /etc/sysctl.d/99-oracle-optimize.conf /etc/sysctl.d/99-oracle-optimize.conf.bak.$(date +%Y%m%d)
        echo -e "${yellow}Created backup of optimization settings${nc}"
    fi
    
    if [ -f /etc/security/limits.d/99-oracle-optimize.conf ]; then
        cp /etc/security/limits.d/99-oracle-optimize.conf /etc/security/limits.d/99-oracle-optimize.conf.bak.$(date +%Y%m%d)
        echo -e "${yellow}Created backup of limits settings${nc}"
    fi
}

post_remove() {
    echo -e "${blue}Cleaning up configurations after package removal...${nc}"
    
    # Remove configuration files
    rm -f /etc/sysctl.d/99-oracle-optimize.conf
    rm -f /etc/security/limits.d/99-oracle-optimize.conf
    
    echo -e "${yellow}Note: Kernel parameters will remain active until reboot.${nc}"
    echo -e "${yellow}Serial console settings in GRUB remain until manually removed.${nc}"
    
    echo -e "${green}==============================================================${nc}"
    echo -e "${green}Oracle Cloud optimization package has been removed.${nc}"
    echo -e "${yellow}Backup configurations are available at:${nc}"
    echo -e "${yellow} - /etc/sysctl.conf.bak.*${nc}"
    echo -e "${yellow} - /etc/security/limits.conf.bak.*${nc}"
    echo -e "${yellow} - /etc/default/grub.bak.*${nc}"
    echo -e "${yellow}To restore original configurations, use these files.${nc}"
    echo -e "${green}==============================================================${nc}"
}